@page "/appointments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Skincare Appointments</h3>
<br />

<a href="/appointments/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Appointment
</a>
<br />
<br />

@if (Appointments == null)
{
<div class="alert alert-info">Loading Appointments...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Appointment Id</th>
                <th>Customer Username</th>
                <th>Appointment Date</th>
                <th>Duration in days</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Appointments)
            {
                <tr>
                    <td>@appointment.Id</td>
                    <td>@appointment.Customer.Username</td>
                    <td>@appointment.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                    <td>@(appointment.DateIn != null ? (appointment.DateIn.Value - appointment.DateOut).TotalDays.ToString() : "To Be Determined")</td>
                    <td>
                        <a href="/appointments/view/@appointment.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/appointments/edit/@appointment.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(appointment.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Appointment>? Appointments;

    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        Appointments = await _client.GetFromJsonAsync<List<Appointment>>($"{Endpoints.AppointmentsEndpoint}");
    }

    async Task Delete(int appointmentId)
    {
        if (Appointments != null)
        {
            var appointment = Appointments.First(q => q.Id == appointmentId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {appointment.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.AppointmentsEndpoint}/{appointmentId}");
                await OnInitializedAsync();
            }
        }
    }
}

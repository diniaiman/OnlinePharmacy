@page "/appointments/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Appointment</h3>
<hr />
<br />

<EditForm Model="@appointment" OnValidSubmit="CreateAppointment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
            <label>Product: </label>
            <div>
                <InputSelect @bind-Value="appointment.ProductId" class="form-control">
                    <option value="">-- Select Product --</option>
                    @if (Products != null)
                    {
                        foreach (var product in Products)
                        {
                            <option value="@product.Id">@product.LicensePlateNumber</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => appointment.ProductId)" />
            </div>
        </div>

        <div class="form-group">
            <label>User: </label>
            <div>
                <InputSelect @bind-Value="appointment.UserId" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (Users != null)
                    {
                        foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => appointment.UserId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Out: </label>
            <div>
                <InputDate @bind-Value="@appointment.DateOut" class="form-control" />
                <ValidationMessage For="@(() => appointment.DateOut)" />
            </div>
        </div>

        @if (appointment.Id > 0)
        {
            <div class="form-group">
                <label>Date In: </label>
                <div>
                    <InputDate @bind-Value="@appointment.DateIn" class="form-control" />
                    <ValidationMessage For="@(() => appointment.DateIn)" />
                </div>
            </div>
        }
    </fieldset>

    <br />
    <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

</EditForm>

@code {
    Appointment appointment = new Appointment();

    private IList<Product>? Products;
    private IList<User>? Users;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
    }

    private async Task CreateAppointment()
    {
        await _client.PostAsJsonAsync(Endpoints.AppointmentsEndpoint, appointment);
        _navManager.NavigateTo("/appointments/");
    }

}
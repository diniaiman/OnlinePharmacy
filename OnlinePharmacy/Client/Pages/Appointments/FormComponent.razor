@inject HttpClient _client

<EditForm Model="@appointment" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Customer: </label>
            <div>
                <InputSelect @bind-Value="appointment.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Username </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => appointment.CustomerId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Appointment Date: </label>
            <div>
                <InputDate @bind-Value="@appointment.DateOut" class="form-control" />
                <ValidationMessage For="@(() => appointment.DateOut)" />
            </div>
        </div>

        @if (appointment.Id > 0)
        {
            <div class="form-group">
                <label>Date In: </label>
                <div>
                    <InputDate @bind-Value="@appointment.DateIn" class="form-control" />
                    <ValidationMessage For="@(() => appointment.DateIn)" />
                </div>
            </div>
        }
    </fieldset>

    <br />
    <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="appointments" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Appointment? appointment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
}

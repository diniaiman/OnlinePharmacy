@inject HttpClient _client

<EditForm Model="@orderitem" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Customer: </label>
            <div>
                <InputSelect @bind-Value="orderitem.CustomerId" class="form-control">
                    <option value=" "> -- Select Customer -- </option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Username</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => orderitem.CustomerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Order Date: </label>
            <div class="form-group">
                <div>
                    <InputDate @bind-Value="@orderitem.DateOut" class="form-control" />
                    <ValidationMessage For="@(() => orderitem.DateOut)" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <label>Product: </label>
            <div>
                <InputSelect @bind-Value="orderitem.ProductId" class="form-control">
                    <option value=" "> -- Select Product -- </option>
                    @if (Products != null)
                    {
                        foreach (var product in Products)
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => orderitem.ProductId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Quantity: </label>
            <div>
                <InputNumber @bind-Value="@orderitem.Quantity" class="form-control" />
                <ValidationMessage For="@(() => orderitem.Quantity)" />
            </div>
        </div>

    </fieldset>

    <br />
    <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }


    <BackToList Target="orderitems" />
</EditForm>

@code 
{
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public OrderItem orderitem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private IList<Product>? Products;
    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");

    }
}

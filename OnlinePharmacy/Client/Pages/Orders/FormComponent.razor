@inject HttpClient _client

<EditForm Model="@order" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Customer: </label>
            <div>
                <InputSelect @bind-Value="order.CustomerId" class="form-control">
                    <option value=" "> -- Select Customer -- </option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Username</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => order.CustomerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Order Date: </label>
            <div class="form-group">
                <div>
                    <InputDate @bind-Value="@order.DateOut" class="form-control" />
                    <ValidationMessage For="@(() => order.DateOut)" />
                </div>
            </div>
        </div>
    </fieldset>

        <br />
        <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="orders" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Order order { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
}

@page "/orders/create/"
@inject HttpClient _client
@inject NavigationManager _navManager


<h3 class="card-title">Create New Order</h3>
<hr />
<br />

<EditForm Model="@order" OnValidSubmit="CreateOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="order.CustomerId" class="form-control">
                <option value=" "> -- Select Customer -- </option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.Username</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For ="@(() => order.CustomerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Order Date: </label>
        <div>
            <InputText @bind-Value="@order.Order_Date" class="form-control" />
            <ValidationMessage For="@(() => order.Order_Date)" />
        </div>
    </div>
 

    <br />
    <br />

    <button type="submit" class="btn btn-success btn-block">
        Create Order
    </button>

</EditForm>

@code {
    Order order = new Order();

    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
    private async Task CreateOrder()
    {
        await _client.PostAsJsonAsync(Endpoints.OrdersEndpoint, order);
        _navManager.NavigateTo("/orders/");
    }
}
